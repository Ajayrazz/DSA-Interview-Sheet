class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row = obstacleGrid.length;
        int col = obstacleGrid[0].length;
        return dfs(obstacleGrid, 0, 0, row, col, new int[row][col]);
    }

    private int dfs(int[][] grid, int i, int j, int m, int n, int[][] dp){
        //Base Case
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 1){
            return 0;
        }

        if(i == m - 1 && j == n - 1){
            dp[i][j] = 1;
            return dp[i][j];
        }

        if(dp[i][j] != 0){
            return dp[i][j];
        }

        int move_right = dfs(grid, i, j + 1, m, n, dp);
        int move_down = dfs(grid, i + 1, j, m, n, dp);

        dp[i][j] = move_right + move_down;

        return dp[i][j];
    }
}
