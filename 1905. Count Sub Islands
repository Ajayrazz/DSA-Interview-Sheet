class Solution {
    private final int[][] directions = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };

    private boolean isCellLand(int x, int y, int[][] grid) {
        return grid[x][y] == 1;
    }

    private boolean isSubIsland(int x, int y, int[][] grid1, int[][] grid2, boolean[][] visited) {
        int totalRows = grid2.length;
        int totalCols = grid2[0].length;

        boolean isSubIsland = true;

        Queue<int[]> pendingCells = new LinkedList<>();
        pendingCells.offer(new int[]{x, y});
        visited[x][y] = true;

        while(!pendingCells.isEmpty()) {
            int[] curr = pendingCells.poll();
            int currX = curr[0];
            int currY = curr[1];

            if(!isCellLand(currX, currY, grid1)) {
                isSubIsland = false;
            }

            for(int[] direction : directions) {
                int nextX = currX + direction[0];
                int nextY = currY + direction[1];

                if(nextX >= 0 && nextY >= 0 && nextX < totalRows && nextY < totalCols && !visited[nextX][nextY] && isCellLand(nextX, nextY, grid2)) {
                    pendingCells.offer(new int[] {nextX, nextY});
                    visited[nextX][nextY] = true;
                }
            }
        }

        return isSubIsland;
    }

    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int totalRows = grid2.length;
        int totalCols = grid2[0].length;

        boolean[][] visited = new boolean[totalRows][totalCols];
        int subIslandCounts = 0;

        for(int i = 0; i < totalRows; i++) {
            for(int j = 0; j < totalCols; j++) {
                if(!visited[i][j] && isCellLand(i, j, grid2) && isSubIsland(i, j, grid1, grid2, visited)) {
                    subIslandCounts++;
                }
            }
        }

        return subIslandCounts;
    }
}
