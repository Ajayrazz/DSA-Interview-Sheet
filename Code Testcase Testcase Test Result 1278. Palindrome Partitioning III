class Solution {
    public int palindromePartition(String s, int k) {
        int n = s.length();
        int[][] minChars = new int[n][n];

        for (int gap = 0; gap < n; gap++) {
            for (int i = 0, j = gap; j < n; i++, j++) {
                if (gap == 0) {
                    minChars[i][j] = 0;
                } else {
                    minChars[i][j] = s.charAt(i) == s.charAt(j) ? 0 : 1;
                    if (gap > 1) {
                        minChars[i][j] += minChars[i + 1][j - 1];
                    }
                }
            }
        }

        int[][] dp = new int[n][k];

        for (int j = 0; j < n; j++) {
            for (int cuts = 0; cuts <= Math.min(j, k - 1); cuts++) {
                if (cuts == 0) {
                    dp[j][cuts] = minChars[0][j];
                } else {
                    int min = Integer.MAX_VALUE;
                    for (int i = j; i >= cuts; i--) {
                        min = Math.min(min, dp[i - 1][cuts - 1] + minChars[i][j]);
                    }
                    dp[j][cuts] = min;
                }
            }
        }

        return dp[n - 1][k - 1];
    }
}
