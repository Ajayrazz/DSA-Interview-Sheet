class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        // Your Code Here
        return countInv(arr, 0, arr.length - 1);
    }
    
    static int countInv(int arr[], int left, int right) {
        int result = 0;
        if(left < right) {
            
            int mid = left + (right - left) / 2;
            
            result = result + countInv(arr, left, mid);
            result = result + countInv(arr, mid + 1, right);
            
            result = result + countAndMerge(arr, left, mid, right);
        }
        
        return result;
    }
    
    static int countAndMerge(int arr[], int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        
        int leftArr[] = new int[n1];
        int rightArr[] = new int[n2];
        
        for(int i = 0; i < n1; i++) {
            leftArr[i] = arr[left + i];
        }
        
        for(int j = 0; j < n2; j++) {
            rightArr[j] = arr[mid+1+j];
        }
        
        int result = 0;
        int i = 0, j = 0, k = left;
        
        while( i < n1 && j < n2) {
            if(leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            }
            else {
                arr[k] = rightArr[j];
                j++;
                result = result + (n1 - i);
            }
            k++;
        }
        
        while(i < n1) {
            arr[k++] = leftArr[i++];
        }
        
        while(j < n2) {
            arr[k++] = rightArr[j++];
        }
        
        return result;
    }
}
