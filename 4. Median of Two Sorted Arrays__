class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        //Base Case
        if(n1 > n2){
            return findMedianSortedArrays(nums2, nums1);
        }

        int n = n1 + n2;
        int left = (n1 + n2 + 1) / 2;
        int low = 0, high = n1;

        //Binary Search
        while(low <= high){
            int mid1 = low + (high - low) / 2;
            int mid2 = left - mid1;

            int L1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int L2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int R1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int R2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;

            if(L1 <= R2 && L2 <= R1){
                if(n % 2 == 1){
                    return Math.max(L1, L2);
                }
                else {
                    return ((double)(Math.max(L1, L2) + Math.min(R1, R2))) / 2.0;
                }
            }
            else if(L1 > R2){
                high = mid1 - 1;
            }
            else {
                low = mid1 + 1;
            }
        }
        return 0;
    }
}
