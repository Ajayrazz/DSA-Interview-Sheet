class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int count = 0, prefixSum = 0;
        Map<Integer, Integer> prefixMap = new HashMap<>();
        prefixMap.put(0, 1);

        for(int num : nums){
            //update the prefix
            prefixSum += num;

            //calculates the remainder of the prefix sum divided by k
            int mod = prefixSum % k;

            //Adjust negative remainders to be positive 
            if(mod < 0){
                mod += k;
            }

            //If this remainder has been seen before, it means there are subarrays
            if(prefixMap.containsKey(mod)){
                count += prefixMap.get(mod);
                prefixMap.put(mod, prefixMap.get(mod) + 1);
            }
            else {
                prefixMap.put(mod, 1);
            }
        }

        return count;
    }
}
