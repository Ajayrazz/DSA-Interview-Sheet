/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        int leftdiam = diameterOfBinaryTree(root.left);
        int rightdiam = diameterOfBinaryTree(root.right);
        int leftht = height(root.left);
        int rightht = height(root.right);

        int selfdiam = leftht + rightht;

        return Math.max(selfdiam, Math.max(leftdiam, rightdiam));
    }

    //Helper function to find the height of binary tree
    private int height(TreeNode root) {
        if(root == null) return 0;
        int leftCount = height(root.left);
        int rightCount = height(root.right);
        //return the final output
        return Math.max(leftCount, rightCount) + 1;
    }
}
