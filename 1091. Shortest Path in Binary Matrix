//Breadth First Search
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        //base case
        if(grid[0][0] != 0) {
            return -1;
        }

        int m = grid.length;
        int n = grid[0].length;

        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0,0});
        int minStep = 1;

        int[][] directions = { {-1, 0}, {0, -1}, {1, 0}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1} };

        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int[] curr = q.poll();
                if(curr[0] == m - 1 && curr[1] == n - 1) {
                    return minStep;
                }

                for(int[] dir : directions) {
                    int x = curr[0] + dir[0];
                    int y = curr[1] + dir[1];

                    if(isPossible(x, y, m, n) && grid[x][y] == 0) {
                        grid[x][y] = 1;
                        q.add(new int[]{x, y});
                    }
                }
            }
            minStep++;
        }

        return -1;
    }

    //Helper Function
    public boolean isPossible(int i, int j, int m, int n) {
        if(i < 0 || j < 0 || i >= m || j >= n){
            return false;
        }
        return true;
    }
}
